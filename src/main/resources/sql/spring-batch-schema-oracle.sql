-- Spring Batch 메타데이터 테이블 생성 스크립트 (Oracle)
-- Spring Batch 5.x 버전용
-- SC_PT 스키마에 생성

-- 1. BATCH_JOB_INSTANCE
CREATE TABLE SC_PT.BATCH_JOB_INSTANCE (
    JOB_INSTANCE_ID NUMBER(19,0) NOT NULL PRIMARY KEY,
    VERSION NUMBER(10,0),
    JOB_NAME VARCHAR2(100) NOT NULL,
    JOB_KEY VARCHAR2(32) NOT NULL,
    CONSTRAINT JOB_INST_UN UNIQUE (JOB_NAME, JOB_KEY)
);

-- 2. BATCH_JOB_EXECUTION
CREATE TABLE SC_PT.BATCH_JOB_EXECUTION (
    JOB_EXECUTION_ID NUMBER(19,0) NOT NULL PRIMARY KEY,
    VERSION NUMBER(10,0),
    JOB_INSTANCE_ID NUMBER(19,0) NOT NULL,
    CREATE_TIME TIMESTAMP NOT NULL,
    START_TIME TIMESTAMP,
    END_TIME TIMESTAMP,
    STATUS VARCHAR2(10),
    EXIT_CODE VARCHAR2(2500),
    EXIT_MESSAGE VARCHAR2(2500),
    LAST_UPDATED TIMESTAMP,
    JOB_CONFIGURATION_LOCATION VARCHAR2(2500),
    CONSTRAINT JOB_INST_EXEC_FK FOREIGN KEY (JOB_INSTANCE_ID)
    REFERENCES SC_PT.BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
);

-- 3. BATCH_JOB_EXECUTION_PARAMS
CREATE TABLE SC_PT.BATCH_JOB_EXECUTION_PARAMS (
    JOB_EXECUTION_ID NUMBER(19,0) NOT NULL,
    PARAMETER_NAME VARCHAR2(100) NOT NULL,
    PARAMETER_TYPE VARCHAR2(100) NOT NULL,
    PARAMETER_VALUE VARCHAR2(2500),
    IDENTIFYING CHAR(1) NOT NULL,
    CONSTRAINT JOB_EXEC_PARAMS_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES SC_PT.BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- 4. BATCH_STEP_EXECUTION
CREATE TABLE SC_PT.BATCH_STEP_EXECUTION (
    STEP_EXECUTION_ID NUMBER(19,0) NOT NULL PRIMARY KEY,
    VERSION NUMBER(10,0) NOT NULL,
    STEP_NAME VARCHAR2(100) NOT NULL,
    JOB_EXECUTION_ID NUMBER(19,0) NOT NULL,
    CREATE_TIME TIMESTAMP NOT NULL,
    START_TIME TIMESTAMP,
    END_TIME TIMESTAMP,
    STATUS VARCHAR2(10),
    COMMIT_COUNT NUMBER(10,0),
    READ_COUNT NUMBER(10,0),
    FILTER_COUNT NUMBER(10,0),
    WRITE_COUNT NUMBER(10,0),
    READ_SKIP_COUNT NUMBER(10,0),
    WRITE_SKIP_COUNT NUMBER(10,0),
    PROCESS_SKIP_COUNT NUMBER(10,0),
    ROLLBACK_COUNT NUMBER(10,0),
    EXIT_CODE VARCHAR2(2500),
    EXIT_MESSAGE VARCHAR2(2500),
    LAST_UPDATED TIMESTAMP,
    CONSTRAINT JOB_EXEC_STEP_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES SC_PT.BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- 5. BATCH_STEP_EXECUTION_SEQ
CREATE TABLE SC_PT.BATCH_STEP_EXECUTION_SEQ (
    ID NUMBER(19,0) NOT NULL PRIMARY KEY
);

-- 6. BATCH_JOB_EXECUTION_SEQ
CREATE TABLE SC_PT.BATCH_JOB_EXECUTION_SEQ (
    ID NUMBER(19,0) NOT NULL PRIMARY KEY
);

-- 7. BATCH_JOB_SEQ
CREATE TABLE SC_PT.BATCH_JOB_SEQ (
    ID NUMBER(19,0) NOT NULL PRIMARY KEY
);

-- 8. BATCH_STEP_EXECUTION_CONTEXT
CREATE TABLE SC_PT.BATCH_STEP_EXECUTION_CONTEXT (
    STEP_EXECUTION_ID NUMBER(19,0) NOT NULL PRIMARY KEY,
    SHORT_CONTEXT VARCHAR2(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    CONSTRAINT STEP_EXEC_CTX_FK FOREIGN KEY (STEP_EXECUTION_ID)
    REFERENCES SC_PT.BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
);

-- 9. BATCH_JOB_EXECUTION_CONTEXT
CREATE TABLE SC_PT.BATCH_JOB_EXECUTION_CONTEXT (
    JOB_EXECUTION_ID NUMBER(19,0) NOT NULL PRIMARY KEY,
    SHORT_CONTEXT VARCHAR2(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID)
    REFERENCES SC_PT.BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- 인덱스 생성
CREATE INDEX SC_PT.BATCH_JOB_INSTANCE_JOB_NAME_IX ON SC_PT.BATCH_JOB_INSTANCE(JOB_NAME);
CREATE INDEX SC_PT.BATCH_JOB_EXECUTION_JOB_INSTANCE_ID_IX ON SC_PT.BATCH_JOB_EXECUTION(JOB_INSTANCE_ID);
CREATE INDEX SC_PT.BATCH_JOB_EXECUTION_STATUS_IX ON SC_PT.BATCH_JOB_EXECUTION(STATUS);
CREATE INDEX SC_PT.BATCH_STEP_EXECUTION_JOB_EXECUTION_ID_IX ON SC_PT.BATCH_STEP_EXECUTION(JOB_EXECUTION_ID);
CREATE INDEX SC_PT.BATCH_STEP_EXECUTION_STEP_NAME_IX ON SC_PT.BATCH_STEP_EXECUTION(STEP_NAME);

-- 시퀀스 초기값 삽입
INSERT INTO SC_PT.BATCH_STEP_EXECUTION_SEQ (ID) VALUES (0);
INSERT INTO SC_PT.BATCH_JOB_EXECUTION_SEQ (ID) VALUES (0);
INSERT INTO SC_PT.BATCH_JOB_SEQ (ID) VALUES (0);

COMMIT; 